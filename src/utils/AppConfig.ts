import { IAppConfig, INavigationItem, IUser } from "@/utils/types"
import { parseCookies } from "nookies"
import api from "@/api/axiosInstance"

// Application Metadata
export const MetaData = {
  title: "EMS Application",
  description: "Generated by EMS Application",
}

// Application Configuration
export const AppConfig: IAppConfig = {
  siteName: "",
  logoPath: "/assets/images/Elitia_Logo.svg",
  imagePath: "/assets/images",
}

// Navigation Items
export const UserNavigation: INavigationItem[] = [
  { name: "Profile", href: "/profile" },
  { name: "Settings", href: "/settings" },
  { name: "Logout", href: "/logout" },
]

// Function to get the user's image
export const getUserImage = (user: IUser): string => {
  const storedAvatar = sessionStorage.getItem(`avatar_${user.emailAddress}`)
  return storedAvatar || user.photoUrl || ""
}

// âœ… Save user details locally
export const saveUserDetails = (user: IUser): void => {
  localStorage.setItem("currentUser", JSON.stringify(user))
  localStorage.setItem("currentUserEmail", user.emailAddress)
  sessionStorage.setItem(`avatar_${user.emailAddress}`, user.photoUrl || "")
}

// âœ… Clear user details (on logout)
export const clearUserDetails = (): void => {
  localStorage.removeItem("currentUser")
  localStorage.removeItem("currentUserEmail")
}

// âœ… Fetch user details
export const getUserDetails = async (email?: string): Promise<IUser | null> => {
  try {
    const cookies = parseCookies()
    const token = cookies.authToken
    if (!token) {
      console.error("No authentication token found in cookies")
      return null
    }

    // If email not passed, get from localStorage
    const userEmail = email || localStorage.getItem("currentUserEmail")
    if (!userEmail) {
      console.error("No email provided or stored for fetching user details")
      return null
    }

    const response = await api.get(`/user/details`, {
      params: { email: userEmail },
      headers: {
        Authorization: `Bearer ${token}`,
      },
    })

    const user = response.data?.Data || response.data?.user || null

    if (user) {
      saveUserDetails(user) // âœ… cache latest user
    }

    return user
  } catch (error) {
    console.error("Error fetching user details", error)

    // ðŸ›‘ fallback: try from local cache
    const cached = localStorage.getItem("currentUser")
    return cached ? JSON.parse(cached) : null
  }
}

// âœ… Update user details
export const updateUserDetails = async (
  updatedUser: IUser,
): Promise<{ success: boolean; message: string }> => {
  try {
    const cookies = parseCookies()
    const token = cookies.authToken
    if (!token) {
      return { success: false, message: "No authentication token found" }
    }

    await api.put(`/user/update`, updatedUser, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    })

    // Update cached user
    saveUserDetails(updatedUser)

    return { success: true, message: "User details updated successfully!" }
  } catch (error) {
    console.error("Error updating user details", error)
    return { success: false, message: "Failed to update user details." }
  }
}

// import { IAppConfig, INavigationItem, IUser } from "@/utils/types"
// import { parseCookies } from "nookies"
// import api from "@/api/axiosInstance"

// // Application Metadata
// export const MetaData = {
//   title: "EMS Application",
//   description: "Generated by EMS Application",
// }

// // Application Configuration
// export const AppConfig: IAppConfig = {
//   siteName: "",
//   logoPath: "/assets/images/Elitia_Logo.svg",
//   imagePath: "/assets/images",
// }

// // Navigation Items
// export const UserNavigation: INavigationItem[] = [
//   { name: "Profile", href: "/profile" },
//   { name: "Settings", href: "/settings" },
//   { name: "Logout", href: "/logout" },
// ]

// // Function to get the user's image
// export const getUserImage = (user: IUser): string => {
//   const storedAvatar = sessionStorage.getItem(`avatar_${user.email}`)
//   return storedAvatar || user.photoUrl || ""
// }

// // Fetch user details
// export const getUserDetails = async (
//   email: string,
// ): Promise<IUser | undefined> => {
//   try {
//     const cookies = parseCookies()
//     const token = cookies.authToken
//     if (!token) {
//       console.error("No authentication token found in cookies")
//       return undefined
//     }

//     const response = await api.get(`/user/details`, {
//       params: { email }, // âœ… cleaner way instead of query string
//       headers: {
//         Authorization: `Bearer ${token}`,
//       },
//     })

//     return response.data.Data || undefined
//   } catch (error) {
//     console.error("Error fetching user details", error)
//     return undefined
//   }
// }

// // Update user details
// export const updateUserDetails = async (updatedUser: IUser): Promise<void> => {
//   try {
//     const cookies = parseCookies()
//     const token = cookies.authToken
//     if (!token) {
//       console.error("No authentication token found in cookies")
//       return
//     }

//     await api.put(`/user/update`, updatedUser, {
//       headers: {
//         Authorization: `Bearer ${token}`,
//       },
//     })

//     alert("User details updated successfully!")
//   } catch (error) {
//     console.error("Error updating user details", error)
//     alert("Failed to update user details.")
//   }
// }

// import { IAppConfig, INavigationItem, IUser } from "@/utils/types"
// import axios from "axios"
// import { parseCookies } from "nookies" // Import nookies to read cookies
// import api from "@/api/axiosInstance"

// // Application Metadata
// export const MetaData = {
//   title: "EMS Application",
//   description: "Generated by EMS Application",
// }

// // Application Configuration
// export const AppConfig: IAppConfig = {
//   siteName: "",
//   logoPath: "/assets/images/Elitia_Logo.svg",
//   // logoPath: "/assets/images/logo.png",
//   imagePath: "/assets/images",
// }

// // Navigation Items
// export const UserNavigation: INavigationItem[] = [
//   {
//     name: "Profile",
//     href: "/profile",
//   },
//   {
//     name: "Settings",
//     href: "/settings",
//   },
//   {
//     name: "Logout",
//     href: "/logout",
//   },
// ]

// // Function to get the user's image (from session storage or backend)
// export const getUserImage = (user: IUser): string => {
//   // Check if session storage contains a custom image
//   const storedAvatar = sessionStorage.getItem(`avatar_${user.email}`)
//   if (storedAvatar) {
//     return storedAvatar
//   }

//   // If no custom image in session, return the backend image
//   return user.photoUrl || ""
// }

// // Fetch user details based on email (from backend)
// export const getUserDetails = async (
//   email: string,
// ): Promise<IUser | undefined> => {
//   try {
//     // Fetch token from cookies
//     const cookies = parseCookies()
//     const token = cookies.authToken // Make sure the cookie name is 'authToken'
//     if (!token) {
//       console.error("No authentication token found in cookies")
//       return undefined
//     }

//     const response = await axios.get(
//       `${process.env.NEXT_PUBLIC_API_URL}/user/details?email=${email}`,
//       {
//         headers: {
//           Authorization: `Bearer ${token}`, // Pass the token in the Authorization header
//         },
//       },
//     )

//     return response.data.Data || undefined
//   } catch (error) {
//     console.error("Error fetching user details", error)
//     return undefined
//   }
// }

// // Update user details
// export const updateUserDetails = async (updatedUser: IUser): Promise<void> => {
//   try {
//     // Fetch token from cookies
//     const cookies = parseCookies()
//     const token = cookies.authToken // Make sure the cookie name is 'authToken'
//     if (!token) {
//       console.error("No authentication token found in cookies")
//       return
//     }

//     await axios.put(
//       `${process.env.NEXT_PUBLIC_API_URL}/user/update`,
//       updatedUser,
//       {
//         headers: {
//           Authorization: `Bearer ${token}`, // Pass the token in the Authorization header
//         },
//       },
//     )

//     alert("User details updated successfully!")
//   } catch (error) {
//     console.error("Error updating user details", error)
//     alert("Failed to update user details.")
//   }
// }
